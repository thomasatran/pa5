(def createBst (x : Num) : Tup (tuple x (null Tup) (null Tup))) 
     (def addBst (x : Num y : Tup) : Tup (let ((val (get y 0 Num)) (left (get y 1 Tup)) (right (get y 2 Tup))) 
     (if (== val x) 
      y 
      (if (< val x)
        (if (isNull right)
          (update y 2 (tuple x (null Tup) (null Tup))) 
          (addBst x right)
        )
        (if (isNull left)
          (let ((emptyP1 0))
            (update y 1 (tuple x (null Tup) (null Tup)))
            y
          ) 
          (addBst x left)) 
      ) 
     )
     ))
     (def inBst (x : Num y : Tup) : Bool 
      (let ((val (get y 0 Num)) (left (get y 1 Tup)) (right (get y 2 Tup))) 
        (if (== val x) 
          true 
          (if (< val x)
            (if (isNull right)
              false 
              (inBst x right)
            )
            (if (isNull left)
              false 
              (inBst x left)
            ) 
          ) 
        )
      )
     )
     (let ((x (createBst 2))) 
     (print x)
     (addBst 4 x )
     (print (inBst -3 x))
     (print x)
     (addBst 16 x)
     (addBst -3 x)
     (addBst -59 x)
     (print x)
     (print (inBst -3 x))
     (print (inBst 400 x))
     (print (inBst 16 x))
     )